name: Agent Model

on:
  pull_request:
    branches:
      - main
    paths:
      - 'chatbot/agent/**'
      - '.github/workflows/agent.yml'
    types:
      - closed

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-test:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    environment: prod

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install Python dependencies
        working-directory: chatbot/agent
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with pytest
        working-directory: chatbot/agent
        run: |
          pip install pytest
          pytest

  build-push-deploy:
    needs: build-and-test  # This job depends on the build-and-test job
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    environment: prod

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image for Agent Model
        working-directory: chatbot/agent
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AGENT_MODEL_ECR }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.3

      - name: Terraform Init
        working-directory: deploy/infra/env/prod
        run: terraform init

      - name: Terraform format
        working-directory: deploy/infra
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform validate
        working-directory: deploy/infra/env/prod
        id: validate
        run: terraform validate

      - name: Setup Terraform Variables
        working-directory: deploy/infra/env/prod
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          cat <<EOF > terraform.tfvars
          aws_region = "${{ secrets.AWS_REGION }}"
          environment = "${{ vars.ENVIRONMENT }}"
          agent_model_role_name = "${{ vars.AGENT_MODEL_ROLE_ARN }}"
          foundation_model_role_name = "${{ vars.FOUNDATION_MODEL_ROLE_ARN }}"
          model_artifacts_bucket_name = "${{ vars.MODEL_ARTIFACTS_BUCKET_NAME }}"
          agent_model_name = "${{ vars.AGENT_MODEL_NAME }}"
          agent_ecr_image_uri = "${{ env.IMAGE_URI }}"
          agent_instance_type = "${{ vars.AGENT_INSTANCE_TYPE }}"
          agent_initial_instance_count = ${{ vars.AGENT_INITIAL_INSTANCE_COUNT }}
          EOF

      - name: Terraform Plan
        id: plan
        working-directory: deploy/infra/env/prod
        run: terraform plan -input=false -var-file=terraform.tfvars

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: deploy/infra/env/prod
        run: |
          terraform apply -auto-approve -input=false -var-file=terraform.tfvars
